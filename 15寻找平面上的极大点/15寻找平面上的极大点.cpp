//编程题＃4：寻找平面上的极大点
//来源 : POJ(Coursera声明：在POJ上完成的习题将不会计入Coursera的最后成绩。)
//
//	注意： 总时间限制 : 1000ms 内存限制 : 65536kB
//
//	描述
//	在一个平面上，如果有两个点(x, y), (a, b), 如果说(x, y)支配了(a, b)，这是指x >= a, y >= b;
//
//用图形来看就是(a, b)坐落在以(x, y)为右上角的一个无限的区域内。
//
//给定n个点的集合，一定存在若干个点，它们不会被集合中的任何一点所支配，这些点叫做极大值点。
//
//编程找出所有的极大点，按照x坐标由小到大，输出极大点的坐标。
//
//本题规定：n不超过100，并且不考虑点的坐标为负数的情况。
//
//输入
//输入包括两行，第一行是正整数n，表示是点数，第二行包含n个点的坐标，坐标值都是整数，坐标范围从0到100，输入数据中不存在坐标相同的点。
//
//输出
//按x轴坐标最小到大的顺序输出所有极大点。
//
//输出格式为 : (x1, y1), (x2, y2), ...(xk, yk)
//
//	注意：输出的每个点之间有","分隔, 最后一个点之后没有",", 少输出和多输出都会被判错
//
//	样例输入
//	5
//	1 2 2 2 3 1 2 3 1 4
//	样例输出
//
//	(1, 4), (2, 3), (3, 1)
//#include <iostream>
//using namespace std;
//
//#define MAX_N 100
//
//struct Point {
//	int x;
//	int y;
//	bool isMax;
//	//Point() : x(0), y(0), isMax(false) {}
//};
//
//int sortX(Point p[], int n)
//{
//	//int maxX = p[0].x;
//	int i;
//	for (i = 0; i < n - 1; i++) {
//		for (int j = i + 1; j < n; j++) {
//			if (p[i].x > p[j].x) {
//				Point t = p[i];
//				p[i] = p[j];
//				p[j] = t;
//			}
//		}
//		//if (p[i + 1].x > maxX)
//		//	maxX = p[i + 1].x;
//	}
//
//	return p[i].x;
//}
//
//int main()
//{
//	int n;
//	Point p[MAX_N] = {};
//	cin >> n;
//	for (int i = 0; i < n; i++)
//		cin >> p[i].x >> p[i].y;
//	for (int i = 0; i < n; i++) {
//		bool isMax = true;
//		for (int j = 0; j < n; j++) {
//			if (i != j && p[j].x >= p[i].x && p[j].y >= p[i].y) {
//				isMax = false;
//				break;
//			}
//		}
//		p[i].isMax = isMax;
//	}
//
//	int maxX = sortX(p, n);
//	int idx = 0;
//	for (; idx < n; idx++) {
//		if (p[idx].isMax) {
//			cout << '(' << p[idx].x << ',' << p[idx].y << ')';
//			if (p[idx].x < maxX)
//				cout << ',';
//		}
//	}
//
//	return 0;
//}

#include<iostream>
using namespace std;
struct Point {
	int x=0;
	int y=0;
	bool isMax=true;
};
int sortX(Point p[], int n) {
	int i;
	for (i = 0; i < n - 1; i++) {
		for (int j = i + 1; j < n; j++) {
			if (p[i].x > p[j].x) {
				Point t = p[i];
				p[i] = p[j];
				p[j] = t;
			}
		}
	}
	return p[i].x;
}
int main() {
	int n=0;
	cin >> n;
	Point p[100];
	for (int i = 0; i < n; i++) {
		cin >> p[i].x >> p[i].y;
	}
	
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (i != j && p[i].x <= p[j].x&&p[i].y <= p[j].y) {
				p[i].isMax = false;
				break;
			}
		}
	}
	int maxX = sortX(p, n);
	for (int i = 0; i < n; i++) {
		if (p[i].isMax) {
			cout << '(' << p[i].x << ',' << p[i].y << ')';
			if (p[i].x < maxX)
				cout << ',';
		}
	}
	return 0;
}